#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/core/mat.hpp>
#include <opencv2/core/operations.hpp>
#include <opencv2/core/types_c.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>

//#include "Magic.h"

using namespace cv;
using namespace std;

const int HEIGHT = 6;
const int WIDTH = 9;
const int SIZE = 50;

const double BLACK_DELTA = 0.05;

void loadMatrices(Mat& cameraMatrix, Mat& distCoeffs) {
	FileStorage fs("out_camera_data.xml", FileStorage::READ); // Read the settings
	if (!fs.isOpened()) {
		cout << "Could not open the calibration file. " << endl;
		return;
	}
	fs["Camera_Matrix"] >> cameraMatrix;
	fs["Distortion_Coefficients"] >> distCoeffs;
	fs.release();
}

void drawAxises(Mat& img, Point corner, Point xaxis, Point yaxis, Point zaxis) {
	line(img, corner, xaxis, Scalar(255, 0, 0), 2); // B
	line(img, corner, yaxis, Scalar(0, 255, 0), 2); // G
	line(img, corner, zaxis, Scalar(0, 0, 255), 2); // R
}

void drawRectangle(Mat& img, Point a, Point b, Point c, Point d) {
	line(img, a, b, Scalar(255, 0, 0), 2); // B
	line(img, b, c, Scalar(0, 255, 0), 2); // G
	line(img, c, d, Scalar(255, 0, 0), 2); // B
	line(img, d, a, Scalar(0, 255, 0), 2); // G
}

Mat myrot(const Mat& rvec, float x, float y, float z) {
	Mat rmat;
	Rodrigues(rvec, rmat);

	// rmat-ot transzformálni
	// Rx
	Mat rx = (Mat_<double>(3, 3) << 1, 0, 0, 0, cos(x), -sin(x), 0, sin(x), cos(
			x));

	Mat ry = (Mat_<double>(3, 3) << cos(y), 0, sin(y), 0, 1, 0, -sin(y), 0, cos(
			y));

	Mat rz =
			(Mat_<double>(3, 3) << cos(z), -sin(z), 0, sin(z), cos(z), 0, 0, 0, 1);

	Mat ret;
	Rodrigues(rmat * rx * ry * rz, ret);
	return ret;
}

int main2() {
	Mat cameraMatrix, distCoeffs;
	loadMatrices(cameraMatrix, distCoeffs);

	VideoCapture cam1;
	cam1.open(0);

	VideoCapture cam2;
	cam2.open("http://192.168.1.105:8080/videofeed?a.mjpg");

	//VideoCapture inputCapture2;
	//inputCapture2.open(1); //"VID_20140224_222626.mp4"); //0);

	bool undist = true;

	int cam_distance = 1200;
	int rot1 = 0;
	int rot2 = 0;
	int rot3 = 180;

	Mat cam;
	Mat view, gray, warped;

	vector<Point3f> objectPoints;
	for (int i = 0; i < HEIGHT; ++i)
		for (int j = 0; j < WIDTH; ++j)
			objectPoints.push_back(
					Point3f(float(j * SIZE), float(i * SIZE), 0));

	vector<Point3d> axises;
	axises.push_back(Point3f(SIZE * 3, 0.0f, 0.0f));
	axises.push_back(Point3f(0.0f, SIZE * 3, 0.0f));
	axises.push_back(Point3f(0.0f, 0.0f, -SIZE * 3));

	axises.push_back(Point3f(0.0f, 0.0f, 0.0f));
	axises.push_back(Point3f(SIZE * 9, 0.0f, 0.0f));
	axises.push_back(Point3f(SIZE * 9, SIZE * 6, 0.0f));
	axises.push_back(Point3f(0, SIZE * 6, 0.0f));

	axises.push_back(Point3f(0.0f, 0.0f, -SIZE * 3));
	axises.push_back(Point3f(SIZE * 9, 0.0f, -SIZE * 3));
	axises.push_back(Point3f(SIZE * 9, SIZE * 6, -SIZE * 3));
	axises.push_back(Point3f(0, SIZE * 6, -SIZE * 3));

	//VideoWriter outputVideo;
	//Size S = Size(720 * 2, 480);
	//outputVideo.open("output.avi", CV_FOURCC('X', 'V', 'I', 'D'), 30, S, true);

	//if (!outputVideo.isOpened()) {
//		cout << "Could not open the output video for write..";
	//return -1;
	//}

	int i = 0;

	Mat view1, view2;

	bool black1 = false;
	bool black2 = false;

	bool detected = false;
	int first = 0;

	while (true) {

		warped = view.clone();

		cvtColor(view, gray, COLOR_BGR2GRAY);

		vector<Point2f> corners;

		if (findChessboardCorners(gray, Size(9, 6), corners)) {
			cornerSubPix(gray, corners, Size(11, 11), Size(-1, -1),
					TermCriteria(CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 30, 0.1));

			Mat rvec, tvec, rmat;
			solvePnPRansac(objectPoints, corners, cameraMatrix, distCoeffs,
					rvec, tvec);
			Rodrigues(rvec, rmat);
			Mat cameraPos = -rmat.t() * tvec;

			vector<Point2d> output;
			projectPoints(axises, rvec, tvec, cameraMatrix, distCoeffs, output);

			drawAxises(view, corners[0], output[0], output[1], output[2]);
			drawRectangle(view, output[3], output[4], output[5], output[6]);
			drawRectangle(view, output[7], output[8], output[9], output[10]);
			line(view, output[4], output[8], Scalar(255, 255, 0), 2);
			line(view, output[5], output[9], Scalar(255, 255, 0), 2);
			line(view, output[6], output[10], Scalar(255, 255, 0), 2);

			// játék a kamerával.
			Mat tvec2 =
					(Mat_<double>(1, 3) << SIZE * 4.5, SIZE * 3, cam_distance);
			Mat rvec2 = (Mat_<double>(1, 3) << 0, 0, 0);
			Mat rvec3 = myrot(rvec2, (double) rot1 / 180.0 * M_PI,
					(double) rot2 / 180.0 * M_PI, (double) rot3 / 180.0 * M_PI);

			vector<Point2d> output2;
			projectPoints(axises, rvec3, tvec2, cameraMatrix, distCoeffs,
					output2);

			vector<Point2d> a, b;
			a.push_back(output[3]);
			a.push_back(output[4]);
			a.push_back(output[5]);
			a.push_back(output[6]);

			b.push_back(output2[3]);
			b.push_back(output2[4]);
			b.push_back(output2[5]);
			b.push_back(output2[6]);

			Mat homographyMat = findHomography(a, b);
			warpPerspective(cam, warped, homographyMat, gray.size());

			drawAxises(warped, output2[3], output2[0], output2[1], output2[2]);
			drawRectangle(warped, output2[3], output2[4], output2[5],
					output2[6]);
			drawRectangle(warped, output2[7], output2[8], output2[9],
					output2[10]);
			line(warped, output2[4], output2[8], Scalar(255, 255, 0), 2);
			line(warped, output2[5], output2[9], Scalar(255, 255, 0), 2);
			line(warped, output2[6], output2[10], Scalar(255, 255, 0), 2);
		}

		// ret, objectPoints = cv2.findChessboardCorners(gray, (7,6),None)

		// alkalmazzuk a transzformációt
		//Mat temp = view.clone();
		//if (undist) {
//			undistort(temp, view, cameraMatrix, distCoeffs);
//		}

		//Mat result(Size(view.cols * 2, view.rows), view.type());

		// összeillesztés
		//Mat roi1(result, Rect(0, 0, view.cols, view.rows));
		//Mat roi2(result, Rect(view.cols, 0, warped.cols, warped.rows));
		//view.copyTo(roi1);
		//warped.copyTo(roi2);

		imshow("result", view);
		//outputVideo << result;

		// ha kell kilépünk
		char key = (char) waitKey(50);
		if (key == 27) {
			break;
		} else if (key == 'u') {
			undist = !undist;
		} else if (key == 13) {
			imwrite("", view);
		} else if (key == 'w') {
			cam_distance -= 100;
		} else if (key == 's') {
			cam_distance += 100;
		} else if (key == 'e') {
			rot1 += 10;
		} else if (key == 'q') {
			rot1 -= 10;
		} else if (key == 'd') {
			rot2 += 10;
		} else if (key == 'a') {
			rot2 -= 10;
		} else if (key == 'c') {
			rot3 += 10;
		} else if (key == 'y') {
			rot3 -= 10;
		} else if (key == 'x') {
			rot1 = 0;
			rot2 = 0;
			rot3 = 180;
		}
	}

	while(i != 0) {
		if(first == 1) {
			cam2.grab();
		} else {
			cam1.grab();
		}
		i--;
	}

	while (true) {

			cam1.grab();
			cam2.grab();

			cam1.retrieve(view1);
			cam2.retrieve(view2);

			imshow("result1", view1);
			imshow("result2", view2);

			waitKey(50);
	}

	// outputVideo.release();

	return 0;
}
